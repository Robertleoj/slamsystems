// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/linear_camera_cal.h>
#include <sym/pose3.h>

namespace tag_slam_factors {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: tag_reprojection_error
 *
 * Args:
 *     camera: LinearCameraCal
 *     cam_pose: Pose3
 *     tag_pose: Pose3
 *     measurement: Matrix81
 *     tag_side_length: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix81
 *     jacobian: (8x12) jacobian of res wrt args cam_pose (6), tag_pose (6)
 *     hessian: (12x12) Gauss-Newton hessian for args cam_pose (6), tag_pose (6)
 *     rhs: (12x1) Gauss-Newton rhs for args cam_pose (6), tag_pose (6)
 */
template <typename Scalar>
void TagReprojectionErrorFactor(const sym::LinearCameraCal<Scalar>& camera,
                                const sym::Pose3<Scalar>& cam_pose,
                                const sym::Pose3<Scalar>& tag_pose,
                                const Eigen::Matrix<Scalar, 8, 1>& measurement,
                                const Scalar tag_side_length, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 8, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 8, 12>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 2312

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _camera = camera.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _cam_pose = cam_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _tag_pose = tag_pose.Data();

  // Intermediate terms (400)
  const Scalar _tmp0 = 2 * _cam_pose[2];
  const Scalar _tmp1 = _cam_pose[3] * _tmp0;
  const Scalar _tmp2 = 2 * _cam_pose[0];
  const Scalar _tmp3 = _cam_pose[1] * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = _cam_pose[5] * _tmp4;
  const Scalar _tmp6 = 2 * _cam_pose[1] * _cam_pose[3];
  const Scalar _tmp7 = -_tmp6;
  const Scalar _tmp8 = _cam_pose[2] * _tmp2;
  const Scalar _tmp9 = _tmp7 + _tmp8;
  const Scalar _tmp10 = _cam_pose[6] * _tmp9;
  const Scalar _tmp11 = std::pow(_cam_pose[1], Scalar(2));
  const Scalar _tmp12 = 2 * _tmp11;
  const Scalar _tmp13 = -_tmp12;
  const Scalar _tmp14 = std::pow(_cam_pose[2], Scalar(2));
  const Scalar _tmp15 = 2 * _tmp14;
  const Scalar _tmp16 = -_tmp15;
  const Scalar _tmp17 = _tmp13 + _tmp16 + 1;
  const Scalar _tmp18 = -_cam_pose[4] * _tmp17 - _tmp10 - _tmp5;
  const Scalar _tmp19 = std::pow(_tag_pose[1], Scalar(2));
  const Scalar _tmp20 = std::pow(_tag_pose[2], Scalar(2));
  const Scalar _tmp21 = 1 - 2 * _tmp20;
  const Scalar _tmp22 = Scalar(0.5) * tag_side_length;
  const Scalar _tmp23 = _tmp22 * (-2 * _tmp19 + _tmp21);
  const Scalar _tmp24 = -_tmp23;
  const Scalar _tmp25 = 2 * _tag_pose[3];
  const Scalar _tmp26 = _tag_pose[2] * _tmp25;
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 = 2 * _tag_pose[0];
  const Scalar _tmp29 = _tag_pose[1] * _tmp28;
  const Scalar _tmp30 = _tmp22 * (_tmp27 + _tmp29);
  const Scalar _tmp31 = _tag_pose[4] + _tmp30;
  const Scalar _tmp32 = _tmp24 + _tmp31;
  const Scalar _tmp33 = 2 * _tag_pose[1] * _tag_pose[2];
  const Scalar _tmp34 = _tag_pose[3] * _tmp28;
  const Scalar _tmp35 = _tmp22 * (_tmp33 + _tmp34);
  const Scalar _tmp36 = _tag_pose[2] * _tmp28;
  const Scalar _tmp37 = _tag_pose[1] * _tmp25;
  const Scalar _tmp38 = -_tmp37;
  const Scalar _tmp39 = _tmp22 * (_tmp36 + _tmp38);
  const Scalar _tmp40 = _tag_pose[6] - _tmp39;
  const Scalar _tmp41 = _tmp35 + _tmp40;
  const Scalar _tmp42 = std::pow(_tag_pose[0], Scalar(2));
  const Scalar _tmp43 = _tmp22 * (_tmp21 - 2 * _tmp42);
  const Scalar _tmp44 = _tmp22 * (_tmp26 + _tmp29);
  const Scalar _tmp45 = _tag_pose[5] - _tmp44;
  const Scalar _tmp46 = _tmp43 + _tmp45;
  const Scalar _tmp47 = _tmp4 * _tmp46 + _tmp41 * _tmp9;
  const Scalar _tmp48 = _tmp17 * _tmp32 + _tmp18 + _tmp47;
  const Scalar _tmp49 = _cam_pose[3] * _tmp2;
  const Scalar _tmp50 = -_tmp49;
  const Scalar _tmp51 = _cam_pose[1] * _tmp0;
  const Scalar _tmp52 = _tmp50 + _tmp51;
  const Scalar _tmp53 = _cam_pose[5] * _tmp52;
  const Scalar _tmp54 = _tmp6 + _tmp8;
  const Scalar _tmp55 = _cam_pose[4] * _tmp54;
  const Scalar _tmp56 = std::pow(_cam_pose[0], Scalar(2));
  const Scalar _tmp57 = 2 * _tmp56;
  const Scalar _tmp58 = 1 - _tmp57;
  const Scalar _tmp59 = _tmp13 + _tmp58;
  const Scalar _tmp60 = -_cam_pose[6] * _tmp59 - _tmp53 - _tmp55;
  const Scalar _tmp61 = _tmp32 * _tmp54 + _tmp46 * _tmp52;
  const Scalar _tmp62 = _tmp41 * _tmp59 + _tmp60 + _tmp61;
  const Scalar _tmp63 = std::max<Scalar>(_tmp62, epsilon);
  const Scalar _tmp64 = Scalar(1.0) / (_tmp63);
  const Scalar _tmp65 = _camera[0] * _tmp64;
  const Scalar _tmp66 = -_camera[2] - _tmp48 * _tmp65 + measurement(0, 0);
  const Scalar _tmp67 = -_tmp1;
  const Scalar _tmp68 = _tmp3 + _tmp67;
  const Scalar _tmp69 = _cam_pose[4] * _tmp68;
  const Scalar _tmp70 = _tmp49 + _tmp51;
  const Scalar _tmp71 = _cam_pose[6] * _tmp70;
  const Scalar _tmp72 = _tmp16 + _tmp58;
  const Scalar _tmp73 = -_cam_pose[5] * _tmp72 - _tmp69 - _tmp71;
  const Scalar _tmp74 = _tmp32 * _tmp68 + _tmp41 * _tmp70;
  const Scalar _tmp75 = _tmp46 * _tmp72 + _tmp73 + _tmp74;
  const Scalar _tmp76 = _camera[1] * _tmp64;
  const Scalar _tmp77 = -_camera[3] - _tmp75 * _tmp76 + measurement(1, 0);
  const Scalar _tmp78 = _tmp23 + _tmp31;
  const Scalar _tmp79 = _tag_pose[6] + _tmp39;
  const Scalar _tmp80 = _tmp35 + _tmp79;
  const Scalar _tmp81 = _tag_pose[5] + _tmp44;
  const Scalar _tmp82 = _tmp43 + _tmp81;
  const Scalar _tmp83 = _tmp4 * _tmp82 + _tmp80 * _tmp9;
  const Scalar _tmp84 = _tmp17 * _tmp78 + _tmp18 + _tmp83;
  const Scalar _tmp85 = _tmp52 * _tmp82 + _tmp54 * _tmp78;
  const Scalar _tmp86 = _tmp59 * _tmp80 + _tmp60 + _tmp85;
  const Scalar _tmp87 = std::max<Scalar>(_tmp86, epsilon);
  const Scalar _tmp88 = Scalar(1.0) / (_tmp87);
  const Scalar _tmp89 = _camera[0] * _tmp88;
  const Scalar _tmp90 = -_camera[2] - _tmp84 * _tmp89 + measurement(2, 0);
  const Scalar _tmp91 = _tmp68 * _tmp78 + _tmp70 * _tmp80;
  const Scalar _tmp92 = _tmp72 * _tmp82 + _tmp73 + _tmp91;
  const Scalar _tmp93 = _camera[1] * _tmp88;
  const Scalar _tmp94 = -_camera[3] - _tmp92 * _tmp93 + measurement(3, 0);
  const Scalar _tmp95 = -_tmp30;
  const Scalar _tmp96 = _tag_pose[4] + _tmp95;
  const Scalar _tmp97 = _tmp23 + _tmp96;
  const Scalar _tmp98 = -_tmp35;
  const Scalar _tmp99 = _tmp79 + _tmp98;
  const Scalar _tmp100 = -_tmp43;
  const Scalar _tmp101 = _tmp100 + _tmp81;
  const Scalar _tmp102 = _tmp101 * _tmp4 + _tmp9 * _tmp99;
  const Scalar _tmp103 = _tmp102 + _tmp17 * _tmp97 + _tmp18;
  const Scalar _tmp104 = _tmp101 * _tmp52 + _tmp54 * _tmp97;
  const Scalar _tmp105 = _tmp104 + _tmp59 * _tmp99 + _tmp60;
  const Scalar _tmp106 = std::max<Scalar>(_tmp105, epsilon);
  const Scalar _tmp107 = Scalar(1.0) / (_tmp106);
  const Scalar _tmp108 = _camera[0] * _tmp107;
  const Scalar _tmp109 = -_camera[2] - _tmp103 * _tmp108 + measurement(4, 0);
  const Scalar _tmp110 = _tmp68 * _tmp97 + _tmp70 * _tmp99;
  const Scalar _tmp111 = _tmp101 * _tmp72 + _tmp110 + _tmp73;
  const Scalar _tmp112 = _camera[1] * _tmp107;
  const Scalar _tmp113 = -_camera[3] - _tmp111 * _tmp112 + measurement(5, 0);
  const Scalar _tmp114 = _tmp24 + _tmp96;
  const Scalar _tmp115 = _tmp40 + _tmp98;
  const Scalar _tmp116 = _tmp100 + _tmp45;
  const Scalar _tmp117 = _tmp115 * _tmp9 + _tmp116 * _tmp4;
  const Scalar _tmp118 = _tmp114 * _tmp17 + _tmp117 + _tmp18;
  const Scalar _tmp119 = _tmp114 * _tmp54 + _tmp116 * _tmp52;
  const Scalar _tmp120 = _tmp115 * _tmp59 + _tmp119 + _tmp60;
  const Scalar _tmp121 = std::max<Scalar>(_tmp120, epsilon);
  const Scalar _tmp122 = Scalar(1.0) / (_tmp121);
  const Scalar _tmp123 = _camera[0] * _tmp122;
  const Scalar _tmp124 = -_camera[2] - _tmp118 * _tmp123 + measurement(6, 0);
  const Scalar _tmp125 = _tmp114 * _tmp68 + _tmp115 * _tmp70;
  const Scalar _tmp126 = _tmp116 * _tmp72 + _tmp125 + _tmp73;
  const Scalar _tmp127 = _camera[1] * _tmp122;
  const Scalar _tmp128 = -_camera[3] - _tmp126 * _tmp127 + measurement(7, 0);
  const Scalar _tmp129 = -_tmp51;
  const Scalar _tmp130 = _tmp129 + _tmp50;
  const Scalar _tmp131 = std::pow(_cam_pose[3], Scalar(2));
  const Scalar _tmp132 = -_tmp131;
  const Scalar _tmp133 = _tmp132 + _tmp56;
  const Scalar _tmp134 = -_tmp11;
  const Scalar _tmp135 = _tmp134 + _tmp14;
  const Scalar _tmp136 = _tmp133 + _tmp135;
  const Scalar _tmp137 = -_tmp3;
  const Scalar _tmp138 = _tmp1 + _tmp137;
  const Scalar _tmp139 = -_cam_pose[4] * _tmp138 - _cam_pose[5] * _tmp136 - _cam_pose[6] * _tmp130;
  const Scalar _tmp140 = _tmp130 * _tmp41 + _tmp136 * _tmp46 + _tmp138 * _tmp32 + _tmp139;
  const Scalar _tmp141 = (Scalar(1) / Scalar(2)) * _camera[0];
  const Scalar _tmp142 = std::pow(_tmp63, Scalar(-2));
  const Scalar _tmp143 = -epsilon;
  const Scalar _tmp144 = (((_tmp143 + _tmp62) > 0) - ((_tmp143 + _tmp62) < 0)) + 1;
  const Scalar _tmp145 = _tmp142 * _tmp144;
  const Scalar _tmp146 = _tmp145 * _tmp48;
  const Scalar _tmp147 = _tmp141 * _tmp146;
  const Scalar _tmp148 = _tmp140 * _tmp147;
  const Scalar _tmp149 = -_tmp56;
  const Scalar _tmp150 = _tmp131 + _tmp149;
  const Scalar _tmp151 = _tmp135 + _tmp150;
  const Scalar _tmp152 = -_cam_pose[6] * _tmp151 - _tmp53 - _tmp55;
  const Scalar _tmp153 = (Scalar(1) / Scalar(2)) * _camera[1];
  const Scalar _tmp154 = _tmp145 * _tmp75;
  const Scalar _tmp155 = _tmp153 * _tmp154;
  const Scalar _tmp156 = _tmp140 * _tmp155 - _tmp76 * (_tmp151 * _tmp41 + _tmp152 + _tmp61);
  const Scalar _tmp157 = _tmp130 * _tmp80 + _tmp136 * _tmp82 + _tmp138 * _tmp78 + _tmp139;
  const Scalar _tmp158 = std::pow(_tmp87, Scalar(-2));
  const Scalar _tmp159 = (((_tmp143 + _tmp86) > 0) - ((_tmp143 + _tmp86) < 0)) + 1;
  const Scalar _tmp160 = _tmp158 * _tmp159;
  const Scalar _tmp161 = _tmp160 * _tmp84;
  const Scalar _tmp162 = _tmp141 * _tmp161;
  const Scalar _tmp163 = _tmp157 * _tmp162;
  const Scalar _tmp164 = _tmp160 * _tmp92;
  const Scalar _tmp165 = _tmp153 * _tmp164;
  const Scalar _tmp166 = _tmp157 * _tmp165 - _tmp93 * (_tmp151 * _tmp80 + _tmp152 + _tmp85);
  const Scalar _tmp167 = _tmp101 * _tmp136 + _tmp130 * _tmp99 + _tmp138 * _tmp97 + _tmp139;
  const Scalar _tmp168 = std::pow(_tmp106, Scalar(-2));
  const Scalar _tmp169 = (((_tmp105 + _tmp143) > 0) - ((_tmp105 + _tmp143) < 0)) + 1;
  const Scalar _tmp170 = _tmp168 * _tmp169;
  const Scalar _tmp171 = _tmp103 * _tmp170;
  const Scalar _tmp172 = _tmp141 * _tmp171;
  const Scalar _tmp173 = _tmp167 * _tmp172;
  const Scalar _tmp174 = _tmp111 * _tmp170;
  const Scalar _tmp175 = _tmp153 * _tmp174;
  const Scalar _tmp176 = -_tmp112 * (_tmp104 + _tmp151 * _tmp99 + _tmp152) + _tmp167 * _tmp175;
  const Scalar _tmp177 = _tmp114 * _tmp138 + _tmp115 * _tmp130 + _tmp116 * _tmp136 + _tmp139;
  const Scalar _tmp178 = std::pow(_tmp121, Scalar(-2));
  const Scalar _tmp179 = (((_tmp120 + _tmp143) > 0) - ((_tmp120 + _tmp143) < 0)) + 1;
  const Scalar _tmp180 = _tmp178 * _tmp179;
  const Scalar _tmp181 = _tmp118 * _tmp180;
  const Scalar _tmp182 = _tmp141 * _tmp181;
  const Scalar _tmp183 = _tmp177 * _tmp182;
  const Scalar _tmp184 = _tmp126 * _tmp180;
  const Scalar _tmp185 = _tmp153 * _tmp184;
  const Scalar _tmp186 = -_tmp127 * (_tmp115 * _tmp151 + _tmp119 + _tmp152) + _tmp177 * _tmp185;
  const Scalar _tmp187 = -_tmp14;
  const Scalar _tmp188 = _tmp11 + _tmp187;
  const Scalar _tmp189 = _tmp133 + _tmp188;
  const Scalar _tmp190 = -_tmp8;
  const Scalar _tmp191 = _tmp190 + _tmp7;
  const Scalar _tmp192 = _tmp129 + _tmp49;
  const Scalar _tmp193 = -_cam_pose[4] * _tmp191 - _cam_pose[5] * _tmp192 - _cam_pose[6] * _tmp189;
  const Scalar _tmp194 = _tmp131 + _tmp134 + _tmp187 + _tmp56;
  const Scalar _tmp195 = -_cam_pose[4] * _tmp194 - _tmp10 - _tmp5;
  const Scalar _tmp196 = _tmp194 * _tmp32 + _tmp195 + _tmp47;
  const Scalar _tmp197 = _tmp147 * _tmp196 - _tmp65 * (_tmp189 * _tmp41 + _tmp191 * _tmp32 +
                                                       _tmp192 * _tmp46 + _tmp193);
  const Scalar _tmp198 = _tmp155 * _tmp196;
  const Scalar _tmp199 = _tmp194 * _tmp78 + _tmp195 + _tmp83;
  const Scalar _tmp200 = _tmp162 * _tmp199 - _tmp89 * (_tmp189 * _tmp80 + _tmp191 * _tmp78 +
                                                       _tmp192 * _tmp82 + _tmp193);
  const Scalar _tmp201 = _tmp165 * _tmp199;
  const Scalar _tmp202 = _tmp102 + _tmp194 * _tmp97 + _tmp195;
  const Scalar _tmp203 =
      -_tmp108 * (_tmp101 * _tmp192 + _tmp189 * _tmp99 + _tmp191 * _tmp97 + _tmp193) +
      _tmp172 * _tmp202;
  const Scalar _tmp204 = _tmp175 * _tmp202;
  const Scalar _tmp205 = _tmp114 * _tmp194 + _tmp117 + _tmp195;
  const Scalar _tmp206 =
      -_tmp123 * (_tmp114 * _tmp191 + _tmp115 * _tmp189 + _tmp116 * _tmp192 + _tmp193) +
      _tmp182 * _tmp205;
  const Scalar _tmp207 = _tmp185 * _tmp205;
  const Scalar _tmp208 = _tmp150 + _tmp188;
  const Scalar _tmp209 = -_cam_pose[5] * _tmp208 - _tmp69 - _tmp71;
  const Scalar _tmp210 = _tmp208 * _tmp46 + _tmp209 + _tmp74;
  const Scalar _tmp211 = _tmp210 * _tmp65;
  const Scalar _tmp212 = _tmp190 + _tmp6;
  const Scalar _tmp213 = _tmp11 + _tmp132 + _tmp14 + _tmp149;
  const Scalar _tmp214 = _tmp137 + _tmp67;
  const Scalar _tmp215 = -_cam_pose[4] * _tmp213 - _cam_pose[5] * _tmp214 - _cam_pose[6] * _tmp212;
  const Scalar _tmp216 = _tmp212 * _tmp41 + _tmp213 * _tmp32 + _tmp214 * _tmp46 + _tmp215;
  const Scalar _tmp217 = _tmp216 * _tmp76;
  const Scalar _tmp218 = _tmp208 * _tmp82 + _tmp209 + _tmp91;
  const Scalar _tmp219 = _tmp218 * _tmp89;
  const Scalar _tmp220 = _tmp212 * _tmp80 + _tmp213 * _tmp78 + _tmp214 * _tmp82 + _tmp215;
  const Scalar _tmp221 = _tmp220 * _tmp93;
  const Scalar _tmp222 = _tmp101 * _tmp208 + _tmp110 + _tmp209;
  const Scalar _tmp223 = _tmp108 * _tmp222;
  const Scalar _tmp224 = _tmp101 * _tmp214 + _tmp212 * _tmp99 + _tmp213 * _tmp97 + _tmp215;
  const Scalar _tmp225 = _tmp112 * _tmp224;
  const Scalar _tmp226 = _tmp116 * _tmp208 + _tmp125 + _tmp209;
  const Scalar _tmp227 = _tmp123 * _tmp226;
  const Scalar _tmp228 = _tmp114 * _tmp213 + _tmp115 * _tmp212 + _tmp116 * _tmp214 + _tmp215;
  const Scalar _tmp229 = _tmp127 * _tmp228;
  const Scalar _tmp230 = _tmp12 + _tmp15 - 1;
  const Scalar _tmp231 = _tmp147 * _tmp191 - _tmp230 * _tmp65;
  const Scalar _tmp232 = _tmp153 * _tmp191;
  const Scalar _tmp233 = _camera[1] * _tmp138;
  const Scalar _tmp234 = _tmp154 * _tmp232 - _tmp233 * _tmp64;
  const Scalar _tmp235 = _tmp162 * _tmp191 - _tmp230 * _tmp89;
  const Scalar _tmp236 = _tmp164 * _tmp232 - _tmp233 * _tmp88;
  const Scalar _tmp237 = -_tmp108 * _tmp230 + _tmp172 * _tmp191;
  const Scalar _tmp238 = -_tmp107 * _tmp233 + _tmp174 * _tmp232;
  const Scalar _tmp239 = -_tmp123 * _tmp230 + _tmp182 * _tmp191;
  const Scalar _tmp240 = -_tmp122 * _tmp233 + _tmp184 * _tmp232;
  const Scalar _tmp241 = _tmp147 * _tmp192 - _tmp214 * _tmp65;
  const Scalar _tmp242 = _tmp57 - 1;
  const Scalar _tmp243 = _tmp15 + _tmp242;
  const Scalar _tmp244 = _tmp155 * _tmp192 - _tmp243 * _tmp76;
  const Scalar _tmp245 = _tmp162 * _tmp192 - _tmp214 * _tmp89;
  const Scalar _tmp246 = _tmp165 * _tmp192 - _tmp243 * _tmp93;
  const Scalar _tmp247 = -_tmp108 * _tmp214 + _tmp172 * _tmp192;
  const Scalar _tmp248 = -_tmp112 * _tmp243 + _tmp175 * _tmp192;
  const Scalar _tmp249 = -_tmp123 * _tmp214 + _tmp182 * _tmp192;
  const Scalar _tmp250 = -_tmp127 * _tmp243 + _tmp185 * _tmp192;
  const Scalar _tmp251 = _tmp12 + _tmp242;
  const Scalar _tmp252 = _tmp141 * _tmp251;
  const Scalar _tmp253 = _tmp146 * _tmp252 - _tmp212 * _tmp65;
  const Scalar _tmp254 = _tmp153 * _tmp251;
  const Scalar _tmp255 = -_tmp130 * _tmp76 + _tmp154 * _tmp254;
  const Scalar _tmp256 = _tmp161 * _tmp252 - _tmp212 * _tmp89;
  const Scalar _tmp257 = -_tmp130 * _tmp93 + _tmp164 * _tmp254;
  const Scalar _tmp258 = -_tmp108 * _tmp212 + _tmp171 * _tmp252;
  const Scalar _tmp259 = -_tmp112 * _tmp130 + _tmp174 * _tmp254;
  const Scalar _tmp260 = -_tmp123 * _tmp212 + _tmp181 * _tmp252;
  const Scalar _tmp261 = -_tmp127 * _tmp130 + _tmp185 * _tmp251;
  const Scalar _tmp262 = _tmp36 + _tmp37;
  const Scalar _tmp263 = _tmp22 * _tmp54;
  const Scalar _tmp264 = _tmp262 * _tmp263;
  const Scalar _tmp265 = _tmp33 - _tmp34;
  const Scalar _tmp266 = _tmp22 * _tmp52;
  const Scalar _tmp267 = _tmp265 * _tmp266;
  const Scalar _tmp268 = -_tmp42;
  const Scalar _tmp269 = std::pow(_tag_pose[3], Scalar(2));
  const Scalar _tmp270 = _tmp268 + _tmp269;
  const Scalar _tmp271 = _tmp22 * (-_tmp19 + _tmp20 + _tmp270);
  const Scalar _tmp272 = _tmp271 * _tmp59;
  const Scalar _tmp273 = _tmp264 + _tmp267 + _tmp272;
  const Scalar _tmp274 = _tmp22 * _tmp4;
  const Scalar _tmp275 = _tmp265 * _tmp274;
  const Scalar _tmp276 = _tmp17 * _tmp22;
  const Scalar _tmp277 = _tmp262 * _tmp276;
  const Scalar _tmp278 = _tmp271 * _tmp9;
  const Scalar _tmp279 = _tmp275 + _tmp277 + _tmp278;
  const Scalar _tmp280 = _tmp147 * _tmp273 - _tmp279 * _tmp65;
  const Scalar _tmp281 = _tmp22 * _tmp68;
  const Scalar _tmp282 = _tmp262 * _tmp281;
  const Scalar _tmp283 = _tmp22 * _tmp72;
  const Scalar _tmp284 = _tmp265 * _tmp283;
  const Scalar _tmp285 = _tmp271 * _tmp70;
  const Scalar _tmp286 = _tmp282 + _tmp284 + _tmp285;
  const Scalar _tmp287 = _tmp155 * _tmp273 - _tmp286 * _tmp76;
  const Scalar _tmp288 = _tmp162 * _tmp273 - _tmp279 * _tmp89;
  const Scalar _tmp289 = _tmp165 * _tmp273 - _tmp286 * _tmp93;
  const Scalar _tmp290 = -_tmp275 - _tmp277 - _tmp278;
  const Scalar _tmp291 = -_tmp264 - _tmp267 - _tmp272;
  const Scalar _tmp292 = -_tmp108 * _tmp290 + _tmp172 * _tmp291;
  const Scalar _tmp293 = -_tmp282 - _tmp284 - _tmp285;
  const Scalar _tmp294 = _tmp153 * _tmp291;
  const Scalar _tmp295 = -_tmp112 * _tmp293 + _tmp174 * _tmp294;
  const Scalar _tmp296 = -_tmp123 * _tmp290 + _tmp182 * _tmp291;
  const Scalar _tmp297 = -_tmp127 * _tmp293 + _tmp184 * _tmp294;
  const Scalar _tmp298 = -_tmp33 + _tmp34;
  const Scalar _tmp299 = _tmp274 * _tmp298;
  const Scalar _tmp300 = -_tmp36;
  const Scalar _tmp301 = _tmp300 + _tmp38;
  const Scalar _tmp302 = _tmp276 * _tmp301;
  const Scalar _tmp303 = -_tmp269;
  const Scalar _tmp304 = _tmp19 - _tmp20;
  const Scalar _tmp305 = _tmp22 * (_tmp303 + _tmp304 + _tmp42);
  const Scalar _tmp306 = _tmp305 * _tmp9;
  const Scalar _tmp307 = -_tmp299 - _tmp302 - _tmp306;
  const Scalar _tmp308 = _tmp263 * _tmp301;
  const Scalar _tmp309 = _tmp266 * _tmp298;
  const Scalar _tmp310 = _tmp305 * _tmp59;
  const Scalar _tmp311 = -_tmp308 - _tmp309 - _tmp310;
  const Scalar _tmp312 = _tmp141 * _tmp311;
  const Scalar _tmp313 = _tmp146 * _tmp312 - _tmp307 * _tmp65;
  const Scalar _tmp314 = _tmp281 * _tmp301;
  const Scalar _tmp315 = _tmp283 * _tmp298;
  const Scalar _tmp316 = _tmp305 * _tmp70;
  const Scalar _tmp317 = -_tmp314 - _tmp315 - _tmp316;
  const Scalar _tmp318 = _tmp155 * _tmp311 - _tmp317 * _tmp76;
  const Scalar _tmp319 = _tmp299 + _tmp302 + _tmp306;
  const Scalar _tmp320 = _tmp308 + _tmp309 + _tmp310;
  const Scalar _tmp321 = _tmp141 * _tmp320;
  const Scalar _tmp322 = _tmp161 * _tmp321 - _tmp319 * _tmp89;
  const Scalar _tmp323 = _tmp314 + _tmp315 + _tmp316;
  const Scalar _tmp324 = _tmp165 * _tmp320 - _tmp323 * _tmp93;
  const Scalar _tmp325 = -_tmp108 * _tmp319 + _tmp171 * _tmp321;
  const Scalar _tmp326 = -_tmp112 * _tmp323 + _tmp175 * _tmp320;
  const Scalar _tmp327 = -_tmp123 * _tmp307 + _tmp181 * _tmp312;
  const Scalar _tmp328 = -_tmp127 * _tmp317 + _tmp185 * _tmp311;
  const Scalar _tmp329 = _tmp22 * (_tmp300 + _tmp37);
  const Scalar _tmp330 = _tmp329 + _tmp98;
  const Scalar _tmp331 = _tmp22 * (_tmp19 + _tmp20 + _tmp268 + _tmp303);
  const Scalar _tmp332 = _tmp331 + _tmp95;
  const Scalar _tmp333 = _tmp22 * (_tmp270 + _tmp304);
  const Scalar _tmp334 = -_tmp333;
  const Scalar _tmp335 = _tmp22 * (_tmp27 - _tmp29);
  const Scalar _tmp336 = _tmp334 + _tmp335;
  const Scalar _tmp337 = _tmp330 * _tmp59 + _tmp332 * _tmp54 + _tmp336 * _tmp52;
  const Scalar _tmp338 =
      _tmp147 * _tmp337 - _tmp65 * (_tmp17 * _tmp332 + _tmp330 * _tmp9 + _tmp336 * _tmp4);
  const Scalar _tmp339 =
      _tmp155 * _tmp337 - _tmp76 * (_tmp330 * _tmp70 + _tmp332 * _tmp68 + _tmp336 * _tmp72);
  const Scalar _tmp340 = _tmp329 + _tmp35;
  const Scalar _tmp341 = _tmp30 + _tmp331;
  const Scalar _tmp342 = _tmp333 + _tmp335;
  const Scalar _tmp343 = _tmp340 * _tmp59 + _tmp341 * _tmp54 + _tmp342 * _tmp52;
  const Scalar _tmp344 =
      _tmp162 * _tmp343 - _tmp89 * (_tmp17 * _tmp341 + _tmp340 * _tmp9 + _tmp342 * _tmp4);
  const Scalar _tmp345 =
      _tmp165 * _tmp343 - _tmp93 * (_tmp340 * _tmp70 + _tmp341 * _tmp68 + _tmp342 * _tmp72);
  const Scalar _tmp346 = -_tmp329;
  const Scalar _tmp347 = _tmp346 + _tmp35;
  const Scalar _tmp348 = -_tmp331;
  const Scalar _tmp349 = _tmp30 + _tmp348;
  const Scalar _tmp350 = -_tmp335;
  const Scalar _tmp351 = _tmp333 + _tmp350;
  const Scalar _tmp352 = _tmp347 * _tmp59 + _tmp349 * _tmp54 + _tmp351 * _tmp52;
  const Scalar _tmp353 =
      -_tmp108 * (_tmp17 * _tmp349 + _tmp347 * _tmp9 + _tmp351 * _tmp4) + _tmp172 * _tmp352;
  const Scalar _tmp354 =
      -_tmp112 * (_tmp347 * _tmp70 + _tmp349 * _tmp68 + _tmp351 * _tmp72) + _tmp175 * _tmp352;
  const Scalar _tmp355 = _tmp346 + _tmp98;
  const Scalar _tmp356 = _tmp348 + _tmp95;
  const Scalar _tmp357 = _tmp334 + _tmp350;
  const Scalar _tmp358 = _tmp355 * _tmp59 + _tmp356 * _tmp54 + _tmp357 * _tmp52;
  const Scalar _tmp359 =
      -_tmp123 * (_tmp17 * _tmp356 + _tmp355 * _tmp9 + _tmp357 * _tmp4) + _tmp182 * _tmp358;
  const Scalar _tmp360 =
      -_tmp127 * (_tmp355 * _tmp70 + _tmp356 * _tmp68 + _tmp357 * _tmp72) + _tmp185 * _tmp358;
  const Scalar _tmp361 = _tmp147 * _tmp54 - _tmp17 * _tmp65;
  const Scalar _tmp362 = _tmp155 * _tmp54 - _tmp68 * _tmp76;
  const Scalar _tmp363 = _tmp162 * _tmp54 - _tmp17 * _tmp89;
  const Scalar _tmp364 = _tmp165 * _tmp54 - _tmp68 * _tmp93;
  const Scalar _tmp365 = -_tmp108 * _tmp17 + _tmp172 * _tmp54;
  const Scalar _tmp366 = -_tmp112 * _tmp68 + _tmp175 * _tmp54;
  const Scalar _tmp367 = -_tmp123 * _tmp17 + _tmp182 * _tmp54;
  const Scalar _tmp368 = -_tmp127 * _tmp68 + _tmp185 * _tmp54;
  const Scalar _tmp369 = _tmp141 * _tmp52;
  const Scalar _tmp370 = _tmp146 * _tmp369 - _tmp4 * _tmp65;
  const Scalar _tmp371 = _tmp155 * _tmp52 - _tmp72 * _tmp76;
  const Scalar _tmp372 = _tmp161 * _tmp369 - _tmp4 * _tmp89;
  const Scalar _tmp373 = _tmp165 * _tmp52 - _tmp72 * _tmp93;
  const Scalar _tmp374 = -_tmp108 * _tmp4 + _tmp171 * _tmp369;
  const Scalar _tmp375 = -_tmp112 * _tmp72 + _tmp175 * _tmp52;
  const Scalar _tmp376 = -_tmp123 * _tmp4 + _tmp182 * _tmp52;
  const Scalar _tmp377 = -_tmp127 * _tmp72 + _tmp185 * _tmp52;
  const Scalar _tmp378 = _tmp147 * _tmp59 - _tmp65 * _tmp9;
  const Scalar _tmp379 = _tmp155 * _tmp59 - _tmp70 * _tmp76;
  const Scalar _tmp380 = _tmp162 * _tmp59 - _tmp89 * _tmp9;
  const Scalar _tmp381 = _tmp165 * _tmp59 - _tmp70 * _tmp93;
  const Scalar _tmp382 = -_tmp108 * _tmp9 + _tmp172 * _tmp59;
  const Scalar _tmp383 = -_tmp112 * _tmp70 + _tmp175 * _tmp59;
  const Scalar _tmp384 = -_tmp123 * _tmp9 + _tmp182 * _tmp59;
  const Scalar _tmp385 = -_tmp127 * _tmp70 + _tmp185 * _tmp59;
  const Scalar _tmp386 = std::pow(_tmp169, Scalar(2)) / std::pow(_tmp106, Scalar(4));
  const Scalar _tmp387 = std::pow(_camera[0], Scalar(2));
  const Scalar _tmp388 = (Scalar(1) / Scalar(4)) * _tmp387;
  const Scalar _tmp389 = std::pow(_tmp144, Scalar(2)) / std::pow(_tmp63, Scalar(4));
  const Scalar _tmp390 = std::pow(_tmp179, Scalar(2)) / std::pow(_tmp121, Scalar(4));
  const Scalar _tmp391 = std::pow(_tmp159, Scalar(2)) / std::pow(_tmp87, Scalar(4));
  const Scalar _tmp392 = _tmp169 / [&]() {
    const Scalar base = _tmp106;
    return base * base * base;
  }();
  const Scalar _tmp393 = (Scalar(1) / Scalar(2)) * _tmp387;
  const Scalar _tmp394 = _tmp144 / [&]() {
    const Scalar base = _tmp63;
    return base * base * base;
  }();
  const Scalar _tmp395 = _tmp179 / [&]() {
    const Scalar base = _tmp121;
    return base * base * base;
  }();
  const Scalar _tmp396 = _tmp159 / [&]() {
    const Scalar base = _tmp87;
    return base * base * base;
  }();
  const Scalar _tmp397 = std::pow(_camera[1], Scalar(2));
  const Scalar _tmp398 = (Scalar(1) / Scalar(4)) * _tmp397;
  const Scalar _tmp399 = (Scalar(1) / Scalar(2)) * _tmp397;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 8, 1>& _res = (*res);

    _res(0, 0) = _tmp66;
    _res(1, 0) = _tmp77;
    _res(2, 0) = _tmp90;
    _res(3, 0) = _tmp94;
    _res(4, 0) = _tmp109;
    _res(5, 0) = _tmp113;
    _res(6, 0) = _tmp124;
    _res(7, 0) = _tmp128;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 8, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp148;
    _jacobian(1, 0) = _tmp156;
    _jacobian(2, 0) = _tmp163;
    _jacobian(3, 0) = _tmp166;
    _jacobian(4, 0) = _tmp173;
    _jacobian(5, 0) = _tmp176;
    _jacobian(6, 0) = _tmp183;
    _jacobian(7, 0) = _tmp186;
    _jacobian(0, 1) = _tmp197;
    _jacobian(1, 1) = _tmp198;
    _jacobian(2, 1) = _tmp200;
    _jacobian(3, 1) = _tmp201;
    _jacobian(4, 1) = _tmp203;
    _jacobian(5, 1) = _tmp204;
    _jacobian(6, 1) = _tmp206;
    _jacobian(7, 1) = _tmp207;
    _jacobian(0, 2) = -_tmp211;
    _jacobian(1, 2) = -_tmp217;
    _jacobian(2, 2) = -_tmp219;
    _jacobian(3, 2) = -_tmp221;
    _jacobian(4, 2) = -_tmp223;
    _jacobian(5, 2) = -_tmp225;
    _jacobian(6, 2) = -_tmp227;
    _jacobian(7, 2) = -_tmp229;
    _jacobian(0, 3) = _tmp231;
    _jacobian(1, 3) = _tmp234;
    _jacobian(2, 3) = _tmp235;
    _jacobian(3, 3) = _tmp236;
    _jacobian(4, 3) = _tmp237;
    _jacobian(5, 3) = _tmp238;
    _jacobian(6, 3) = _tmp239;
    _jacobian(7, 3) = _tmp240;
    _jacobian(0, 4) = _tmp241;
    _jacobian(1, 4) = _tmp244;
    _jacobian(2, 4) = _tmp245;
    _jacobian(3, 4) = _tmp246;
    _jacobian(4, 4) = _tmp247;
    _jacobian(5, 4) = _tmp248;
    _jacobian(6, 4) = _tmp249;
    _jacobian(7, 4) = _tmp250;
    _jacobian(0, 5) = _tmp253;
    _jacobian(1, 5) = _tmp255;
    _jacobian(2, 5) = _tmp256;
    _jacobian(3, 5) = _tmp257;
    _jacobian(4, 5) = _tmp258;
    _jacobian(5, 5) = _tmp259;
    _jacobian(6, 5) = _tmp260;
    _jacobian(7, 5) = _tmp261;
    _jacobian(0, 6) = _tmp280;
    _jacobian(1, 6) = _tmp287;
    _jacobian(2, 6) = _tmp288;
    _jacobian(3, 6) = _tmp289;
    _jacobian(4, 6) = _tmp292;
    _jacobian(5, 6) = _tmp295;
    _jacobian(6, 6) = _tmp296;
    _jacobian(7, 6) = _tmp297;
    _jacobian(0, 7) = _tmp313;
    _jacobian(1, 7) = _tmp318;
    _jacobian(2, 7) = _tmp322;
    _jacobian(3, 7) = _tmp324;
    _jacobian(4, 7) = _tmp325;
    _jacobian(5, 7) = _tmp326;
    _jacobian(6, 7) = _tmp327;
    _jacobian(7, 7) = _tmp328;
    _jacobian(0, 8) = _tmp338;
    _jacobian(1, 8) = _tmp339;
    _jacobian(2, 8) = _tmp344;
    _jacobian(3, 8) = _tmp345;
    _jacobian(4, 8) = _tmp353;
    _jacobian(5, 8) = _tmp354;
    _jacobian(6, 8) = _tmp359;
    _jacobian(7, 8) = _tmp360;
    _jacobian(0, 9) = _tmp361;
    _jacobian(1, 9) = _tmp362;
    _jacobian(2, 9) = _tmp363;
    _jacobian(3, 9) = _tmp364;
    _jacobian(4, 9) = _tmp365;
    _jacobian(5, 9) = _tmp366;
    _jacobian(6, 9) = _tmp367;
    _jacobian(7, 9) = _tmp368;
    _jacobian(0, 10) = _tmp370;
    _jacobian(1, 10) = _tmp371;
    _jacobian(2, 10) = _tmp372;
    _jacobian(3, 10) = _tmp373;
    _jacobian(4, 10) = _tmp374;
    _jacobian(5, 10) = _tmp375;
    _jacobian(6, 10) = _tmp376;
    _jacobian(7, 10) = _tmp377;
    _jacobian(0, 11) = _tmp378;
    _jacobian(1, 11) = _tmp379;
    _jacobian(2, 11) = _tmp380;
    _jacobian(3, 11) = _tmp381;
    _jacobian(4, 11) = _tmp382;
    _jacobian(5, 11) = _tmp383;
    _jacobian(6, 11) = _tmp384;
    _jacobian(7, 11) = _tmp385;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp103, Scalar(2)) * std::pow(_tmp167, Scalar(2)) * _tmp386 * _tmp388 +
        std::pow(_tmp118, Scalar(2)) * std::pow(_tmp177, Scalar(2)) * _tmp388 * _tmp390 +
        std::pow(_tmp140, Scalar(2)) * _tmp388 * _tmp389 * std::pow(_tmp48, Scalar(2)) +
        std::pow(_tmp156, Scalar(2)) +
        std::pow(_tmp157, Scalar(2)) * _tmp388 * _tmp391 * std::pow(_tmp84, Scalar(2)) +
        std::pow(_tmp166, Scalar(2)) + std::pow(_tmp176, Scalar(2)) + std::pow(_tmp186, Scalar(2));
    _hessian(1, 0) = _tmp148 * _tmp197 + _tmp156 * _tmp198 + _tmp163 * _tmp200 + _tmp166 * _tmp201 +
                     _tmp173 * _tmp203 + _tmp176 * _tmp204 + _tmp183 * _tmp206 + _tmp186 * _tmp207;
    _hessian(2, 0) = -_tmp103 * _tmp167 * _tmp222 * _tmp392 * _tmp393 -
                     _tmp118 * _tmp177 * _tmp226 * _tmp393 * _tmp395 -
                     _tmp140 * _tmp210 * _tmp393 * _tmp394 * _tmp48 - _tmp156 * _tmp217 -
                     _tmp157 * _tmp218 * _tmp393 * _tmp396 * _tmp84 - _tmp166 * _tmp221 -
                     _tmp176 * _tmp225 - _tmp186 * _tmp229;
    _hessian(3, 0) = _tmp148 * _tmp231 + _tmp156 * _tmp234 + _tmp163 * _tmp235 + _tmp166 * _tmp236 +
                     _tmp173 * _tmp237 + _tmp176 * _tmp238 + _tmp183 * _tmp239 + _tmp186 * _tmp240;
    _hessian(4, 0) = _tmp148 * _tmp241 + _tmp156 * _tmp244 + _tmp163 * _tmp245 + _tmp166 * _tmp246 +
                     _tmp173 * _tmp247 + _tmp176 * _tmp248 + _tmp183 * _tmp249 + _tmp186 * _tmp250;
    _hessian(5, 0) = _tmp148 * _tmp253 + _tmp156 * _tmp255 + _tmp163 * _tmp256 + _tmp166 * _tmp257 +
                     _tmp173 * _tmp258 + _tmp176 * _tmp259 + _tmp183 * _tmp260 + _tmp186 * _tmp261;
    _hessian(6, 0) = _tmp148 * _tmp280 + _tmp156 * _tmp287 + _tmp163 * _tmp288 + _tmp166 * _tmp289 +
                     _tmp173 * _tmp292 + _tmp176 * _tmp295 + _tmp183 * _tmp296 + _tmp186 * _tmp297;
    _hessian(7, 0) = _tmp148 * _tmp313 + _tmp156 * _tmp318 + _tmp163 * _tmp322 + _tmp166 * _tmp324 +
                     _tmp173 * _tmp325 + _tmp176 * _tmp326 + _tmp183 * _tmp327 + _tmp186 * _tmp328;
    _hessian(8, 0) = _tmp148 * _tmp338 + _tmp156 * _tmp339 + _tmp163 * _tmp344 + _tmp166 * _tmp345 +
                     _tmp173 * _tmp353 + _tmp176 * _tmp354 + _tmp183 * _tmp359 + _tmp186 * _tmp360;
    _hessian(9, 0) = _tmp148 * _tmp361 + _tmp156 * _tmp362 + _tmp163 * _tmp363 + _tmp166 * _tmp364 +
                     _tmp173 * _tmp365 + _tmp176 * _tmp366 + _tmp183 * _tmp367 + _tmp186 * _tmp368;
    _hessian(10, 0) = _tmp148 * _tmp370 + _tmp156 * _tmp371 + _tmp163 * _tmp372 +
                      _tmp166 * _tmp373 + _tmp173 * _tmp374 + _tmp176 * _tmp375 +
                      _tmp183 * _tmp376 + _tmp186 * _tmp377;
    _hessian(11, 0) = _tmp148 * _tmp378 + _tmp156 * _tmp379 + _tmp163 * _tmp380 +
                      _tmp166 * _tmp381 + _tmp173 * _tmp382 + _tmp176 * _tmp383 +
                      _tmp183 * _tmp384 + _tmp186 * _tmp385;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp111, Scalar(2)) * std::pow(_tmp202, Scalar(2)) * _tmp386 * _tmp398 +
        std::pow(_tmp126, Scalar(2)) * std::pow(_tmp205, Scalar(2)) * _tmp390 * _tmp398 +
        std::pow(_tmp196, Scalar(2)) * _tmp389 * _tmp398 * std::pow(_tmp75, Scalar(2)) +
        std::pow(_tmp197, Scalar(2)) +
        std::pow(_tmp199, Scalar(2)) * _tmp391 * _tmp398 * std::pow(_tmp92, Scalar(2)) +
        std::pow(_tmp200, Scalar(2)) + std::pow(_tmp203, Scalar(2)) + std::pow(_tmp206, Scalar(2));
    _hessian(2, 1) = -_tmp111 * _tmp202 * _tmp224 * _tmp392 * _tmp399 -
                     _tmp126 * _tmp205 * _tmp228 * _tmp395 * _tmp399 -
                     _tmp196 * _tmp216 * _tmp394 * _tmp399 * _tmp75 - _tmp197 * _tmp211 -
                     _tmp199 * _tmp220 * _tmp396 * _tmp399 * _tmp92 - _tmp200 * _tmp219 -
                     _tmp203 * _tmp223 - _tmp206 * _tmp227;
    _hessian(3, 1) = _tmp197 * _tmp231 + _tmp198 * _tmp234 + _tmp200 * _tmp235 + _tmp201 * _tmp236 +
                     _tmp203 * _tmp237 + _tmp204 * _tmp238 + _tmp206 * _tmp239 + _tmp207 * _tmp240;
    _hessian(4, 1) = _tmp197 * _tmp241 + _tmp198 * _tmp244 + _tmp200 * _tmp245 + _tmp201 * _tmp246 +
                     _tmp203 * _tmp247 + _tmp204 * _tmp248 + _tmp206 * _tmp249 + _tmp207 * _tmp250;
    _hessian(5, 1) = _tmp197 * _tmp253 + _tmp198 * _tmp255 + _tmp200 * _tmp256 + _tmp201 * _tmp257 +
                     _tmp203 * _tmp258 + _tmp204 * _tmp259 + _tmp206 * _tmp260 + _tmp207 * _tmp261;
    _hessian(6, 1) = _tmp197 * _tmp280 + _tmp198 * _tmp287 + _tmp200 * _tmp288 + _tmp201 * _tmp289 +
                     _tmp203 * _tmp292 + _tmp204 * _tmp295 + _tmp206 * _tmp296 + _tmp207 * _tmp297;
    _hessian(7, 1) = _tmp197 * _tmp313 + _tmp198 * _tmp318 + _tmp200 * _tmp322 + _tmp201 * _tmp324 +
                     _tmp203 * _tmp325 + _tmp204 * _tmp326 + _tmp206 * _tmp327 + _tmp207 * _tmp328;
    _hessian(8, 1) = _tmp197 * _tmp338 + _tmp198 * _tmp339 + _tmp200 * _tmp344 + _tmp201 * _tmp345 +
                     _tmp203 * _tmp353 + _tmp204 * _tmp354 + _tmp206 * _tmp359 + _tmp207 * _tmp360;
    _hessian(9, 1) = _tmp197 * _tmp361 + _tmp198 * _tmp362 + _tmp200 * _tmp363 + _tmp201 * _tmp364 +
                     _tmp203 * _tmp365 + _tmp204 * _tmp366 + _tmp206 * _tmp367 + _tmp207 * _tmp368;
    _hessian(10, 1) = _tmp197 * _tmp370 + _tmp198 * _tmp371 + _tmp200 * _tmp372 +
                      _tmp201 * _tmp373 + _tmp203 * _tmp374 + _tmp204 * _tmp375 +
                      _tmp206 * _tmp376 + _tmp207 * _tmp377;
    _hessian(11, 1) = _tmp197 * _tmp378 + _tmp198 * _tmp379 + _tmp200 * _tmp380 +
                      _tmp201 * _tmp381 + _tmp203 * _tmp382 + _tmp204 * _tmp383 +
                      _tmp206 * _tmp384 + _tmp207 * _tmp385;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = _tmp142 * std::pow(_tmp210, Scalar(2)) * _tmp387 +
                     _tmp142 * std::pow(_tmp216, Scalar(2)) * _tmp397 +
                     _tmp158 * std::pow(_tmp218, Scalar(2)) * _tmp387 +
                     _tmp158 * std::pow(_tmp220, Scalar(2)) * _tmp397 +
                     _tmp168 * std::pow(_tmp222, Scalar(2)) * _tmp387 +
                     _tmp168 * std::pow(_tmp224, Scalar(2)) * _tmp397 +
                     _tmp178 * std::pow(_tmp226, Scalar(2)) * _tmp387 +
                     _tmp178 * std::pow(_tmp228, Scalar(2)) * _tmp397;
    _hessian(3, 2) = -_tmp211 * _tmp231 - _tmp217 * _tmp234 - _tmp219 * _tmp235 -
                     _tmp221 * _tmp236 - _tmp223 * _tmp237 - _tmp225 * _tmp238 - _tmp227 * _tmp239 -
                     _tmp229 * _tmp240;
    _hessian(4, 2) = -_tmp211 * _tmp241 - _tmp217 * _tmp244 - _tmp219 * _tmp245 -
                     _tmp221 * _tmp246 - _tmp223 * _tmp247 - _tmp225 * _tmp248 - _tmp227 * _tmp249 -
                     _tmp229 * _tmp250;
    _hessian(5, 2) = -_tmp211 * _tmp253 - _tmp217 * _tmp255 - _tmp219 * _tmp256 -
                     _tmp221 * _tmp257 - _tmp223 * _tmp258 - _tmp225 * _tmp259 - _tmp227 * _tmp260 -
                     _tmp229 * _tmp261;
    _hessian(6, 2) = -_tmp211 * _tmp280 - _tmp217 * _tmp287 - _tmp219 * _tmp288 -
                     _tmp221 * _tmp289 - _tmp223 * _tmp292 - _tmp225 * _tmp295 - _tmp227 * _tmp296 -
                     _tmp229 * _tmp297;
    _hessian(7, 2) = -_tmp211 * _tmp313 - _tmp217 * _tmp318 - _tmp219 * _tmp322 -
                     _tmp221 * _tmp324 - _tmp223 * _tmp325 - _tmp225 * _tmp326 - _tmp227 * _tmp327 -
                     _tmp229 * _tmp328;
    _hessian(8, 2) = -_tmp211 * _tmp338 - _tmp217 * _tmp339 - _tmp219 * _tmp344 -
                     _tmp221 * _tmp345 - _tmp223 * _tmp353 - _tmp225 * _tmp354 - _tmp227 * _tmp359 -
                     _tmp229 * _tmp360;
    _hessian(9, 2) = -_tmp211 * _tmp361 - _tmp217 * _tmp362 - _tmp219 * _tmp363 -
                     _tmp221 * _tmp364 - _tmp223 * _tmp365 - _tmp225 * _tmp366 - _tmp227 * _tmp367 -
                     _tmp229 * _tmp368;
    _hessian(10, 2) = -_tmp211 * _tmp370 - _tmp217 * _tmp371 - _tmp219 * _tmp372 -
                      _tmp221 * _tmp373 - _tmp223 * _tmp374 - _tmp225 * _tmp375 -
                      _tmp227 * _tmp376 - _tmp229 * _tmp377;
    _hessian(11, 2) = -_tmp211 * _tmp378 - _tmp217 * _tmp379 - _tmp219 * _tmp380 -
                      _tmp221 * _tmp381 - _tmp223 * _tmp382 - _tmp225 * _tmp383 -
                      _tmp227 * _tmp384 - _tmp229 * _tmp385;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp231, Scalar(2)) + std::pow(_tmp234, Scalar(2)) +
                     std::pow(_tmp235, Scalar(2)) + std::pow(_tmp236, Scalar(2)) +
                     std::pow(_tmp237, Scalar(2)) + std::pow(_tmp238, Scalar(2)) +
                     std::pow(_tmp239, Scalar(2)) + std::pow(_tmp240, Scalar(2));
    _hessian(4, 3) = _tmp231 * _tmp241 + _tmp234 * _tmp244 + _tmp235 * _tmp245 + _tmp236 * _tmp246 +
                     _tmp237 * _tmp247 + _tmp238 * _tmp248 + _tmp239 * _tmp249 + _tmp240 * _tmp250;
    _hessian(5, 3) = _tmp231 * _tmp253 + _tmp234 * _tmp255 + _tmp235 * _tmp256 + _tmp236 * _tmp257 +
                     _tmp237 * _tmp258 + _tmp238 * _tmp259 + _tmp239 * _tmp260 + _tmp240 * _tmp261;
    _hessian(6, 3) = _tmp231 * _tmp280 + _tmp234 * _tmp287 + _tmp235 * _tmp288 + _tmp236 * _tmp289 +
                     _tmp237 * _tmp292 + _tmp238 * _tmp295 + _tmp239 * _tmp296 + _tmp240 * _tmp297;
    _hessian(7, 3) = _tmp231 * _tmp313 + _tmp234 * _tmp318 + _tmp235 * _tmp322 + _tmp236 * _tmp324 +
                     _tmp237 * _tmp325 + _tmp238 * _tmp326 + _tmp239 * _tmp327 + _tmp240 * _tmp328;
    _hessian(8, 3) = _tmp231 * _tmp338 + _tmp234 * _tmp339 + _tmp235 * _tmp344 + _tmp236 * _tmp345 +
                     _tmp237 * _tmp353 + _tmp238 * _tmp354 + _tmp239 * _tmp359 + _tmp240 * _tmp360;
    _hessian(9, 3) = _tmp231 * _tmp361 + _tmp234 * _tmp362 + _tmp235 * _tmp363 + _tmp236 * _tmp364 +
                     _tmp237 * _tmp365 + _tmp238 * _tmp366 + _tmp239 * _tmp367 + _tmp240 * _tmp368;
    _hessian(10, 3) = _tmp231 * _tmp370 + _tmp234 * _tmp371 + _tmp235 * _tmp372 +
                      _tmp236 * _tmp373 + _tmp237 * _tmp374 + _tmp238 * _tmp375 +
                      _tmp239 * _tmp376 + _tmp240 * _tmp377;
    _hessian(11, 3) = _tmp231 * _tmp378 + _tmp234 * _tmp379 + _tmp235 * _tmp380 +
                      _tmp236 * _tmp381 + _tmp237 * _tmp382 + _tmp238 * _tmp383 +
                      _tmp239 * _tmp384 + _tmp240 * _tmp385;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp241, Scalar(2)) + std::pow(_tmp244, Scalar(2)) +
                     std::pow(_tmp245, Scalar(2)) + std::pow(_tmp246, Scalar(2)) +
                     std::pow(_tmp247, Scalar(2)) + std::pow(_tmp248, Scalar(2)) +
                     std::pow(_tmp249, Scalar(2)) + std::pow(_tmp250, Scalar(2));
    _hessian(5, 4) = _tmp241 * _tmp253 + _tmp244 * _tmp255 + _tmp245 * _tmp256 + _tmp246 * _tmp257 +
                     _tmp247 * _tmp258 + _tmp248 * _tmp259 + _tmp249 * _tmp260 + _tmp250 * _tmp261;
    _hessian(6, 4) = _tmp241 * _tmp280 + _tmp244 * _tmp287 + _tmp245 * _tmp288 + _tmp246 * _tmp289 +
                     _tmp247 * _tmp292 + _tmp248 * _tmp295 + _tmp249 * _tmp296 + _tmp250 * _tmp297;
    _hessian(7, 4) = _tmp241 * _tmp313 + _tmp244 * _tmp318 + _tmp245 * _tmp322 + _tmp246 * _tmp324 +
                     _tmp247 * _tmp325 + _tmp248 * _tmp326 + _tmp249 * _tmp327 + _tmp250 * _tmp328;
    _hessian(8, 4) = _tmp241 * _tmp338 + _tmp244 * _tmp339 + _tmp245 * _tmp344 + _tmp246 * _tmp345 +
                     _tmp247 * _tmp353 + _tmp248 * _tmp354 + _tmp249 * _tmp359 + _tmp250 * _tmp360;
    _hessian(9, 4) = _tmp241 * _tmp361 + _tmp244 * _tmp362 + _tmp245 * _tmp363 + _tmp246 * _tmp364 +
                     _tmp247 * _tmp365 + _tmp248 * _tmp366 + _tmp249 * _tmp367 + _tmp250 * _tmp368;
    _hessian(10, 4) = _tmp241 * _tmp370 + _tmp244 * _tmp371 + _tmp245 * _tmp372 +
                      _tmp246 * _tmp373 + _tmp247 * _tmp374 + _tmp248 * _tmp375 +
                      _tmp249 * _tmp376 + _tmp250 * _tmp377;
    _hessian(11, 4) = _tmp241 * _tmp378 + _tmp244 * _tmp379 + _tmp245 * _tmp380 +
                      _tmp246 * _tmp381 + _tmp247 * _tmp382 + _tmp248 * _tmp383 +
                      _tmp249 * _tmp384 + _tmp250 * _tmp385;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp253, Scalar(2)) + std::pow(_tmp255, Scalar(2)) +
                     std::pow(_tmp256, Scalar(2)) + std::pow(_tmp257, Scalar(2)) +
                     std::pow(_tmp258, Scalar(2)) + std::pow(_tmp259, Scalar(2)) +
                     std::pow(_tmp260, Scalar(2)) + std::pow(_tmp261, Scalar(2));
    _hessian(6, 5) = _tmp253 * _tmp280 + _tmp255 * _tmp287 + _tmp256 * _tmp288 + _tmp257 * _tmp289 +
                     _tmp258 * _tmp292 + _tmp259 * _tmp295 + _tmp260 * _tmp296 + _tmp261 * _tmp297;
    _hessian(7, 5) = _tmp253 * _tmp313 + _tmp255 * _tmp318 + _tmp256 * _tmp322 + _tmp257 * _tmp324 +
                     _tmp258 * _tmp325 + _tmp259 * _tmp326 + _tmp260 * _tmp327 + _tmp261 * _tmp328;
    _hessian(8, 5) = _tmp253 * _tmp338 + _tmp255 * _tmp339 + _tmp256 * _tmp344 + _tmp257 * _tmp345 +
                     _tmp258 * _tmp353 + _tmp259 * _tmp354 + _tmp260 * _tmp359 + _tmp261 * _tmp360;
    _hessian(9, 5) = _tmp253 * _tmp361 + _tmp255 * _tmp362 + _tmp256 * _tmp363 + _tmp257 * _tmp364 +
                     _tmp258 * _tmp365 + _tmp259 * _tmp366 + _tmp260 * _tmp367 + _tmp261 * _tmp368;
    _hessian(10, 5) = _tmp253 * _tmp370 + _tmp255 * _tmp371 + _tmp256 * _tmp372 +
                      _tmp257 * _tmp373 + _tmp258 * _tmp374 + _tmp259 * _tmp375 +
                      _tmp260 * _tmp376 + _tmp261 * _tmp377;
    _hessian(11, 5) = _tmp253 * _tmp378 + _tmp255 * _tmp379 + _tmp256 * _tmp380 +
                      _tmp257 * _tmp381 + _tmp258 * _tmp382 + _tmp259 * _tmp383 +
                      _tmp260 * _tmp384 + _tmp261 * _tmp385;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp280, Scalar(2)) + std::pow(_tmp287, Scalar(2)) +
                     std::pow(_tmp288, Scalar(2)) + std::pow(_tmp289, Scalar(2)) +
                     std::pow(_tmp292, Scalar(2)) + std::pow(_tmp295, Scalar(2)) +
                     std::pow(_tmp296, Scalar(2)) + std::pow(_tmp297, Scalar(2));
    _hessian(7, 6) = _tmp280 * _tmp313 + _tmp287 * _tmp318 + _tmp288 * _tmp322 + _tmp289 * _tmp324 +
                     _tmp292 * _tmp325 + _tmp295 * _tmp326 + _tmp296 * _tmp327 + _tmp297 * _tmp328;
    _hessian(8, 6) = _tmp280 * _tmp338 + _tmp287 * _tmp339 + _tmp288 * _tmp344 + _tmp289 * _tmp345 +
                     _tmp292 * _tmp353 + _tmp295 * _tmp354 + _tmp296 * _tmp359 + _tmp297 * _tmp360;
    _hessian(9, 6) = _tmp280 * _tmp361 + _tmp287 * _tmp362 + _tmp288 * _tmp363 + _tmp289 * _tmp364 +
                     _tmp292 * _tmp365 + _tmp295 * _tmp366 + _tmp296 * _tmp367 + _tmp297 * _tmp368;
    _hessian(10, 6) = _tmp280 * _tmp370 + _tmp287 * _tmp371 + _tmp288 * _tmp372 +
                      _tmp289 * _tmp373 + _tmp292 * _tmp374 + _tmp295 * _tmp375 +
                      _tmp296 * _tmp376 + _tmp297 * _tmp377;
    _hessian(11, 6) = _tmp280 * _tmp378 + _tmp287 * _tmp379 + _tmp288 * _tmp380 +
                      _tmp289 * _tmp381 + _tmp292 * _tmp382 + _tmp295 * _tmp383 +
                      _tmp296 * _tmp384 + _tmp297 * _tmp385;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp313, Scalar(2)) + std::pow(_tmp318, Scalar(2)) +
                     std::pow(_tmp322, Scalar(2)) + std::pow(_tmp324, Scalar(2)) +
                     std::pow(_tmp325, Scalar(2)) + std::pow(_tmp326, Scalar(2)) +
                     std::pow(_tmp327, Scalar(2)) + std::pow(_tmp328, Scalar(2));
    _hessian(8, 7) = _tmp313 * _tmp338 + _tmp318 * _tmp339 + _tmp322 * _tmp344 + _tmp324 * _tmp345 +
                     _tmp325 * _tmp353 + _tmp326 * _tmp354 + _tmp327 * _tmp359 + _tmp328 * _tmp360;
    _hessian(9, 7) = _tmp313 * _tmp361 + _tmp318 * _tmp362 + _tmp322 * _tmp363 + _tmp324 * _tmp364 +
                     _tmp325 * _tmp365 + _tmp326 * _tmp366 + _tmp327 * _tmp367 + _tmp328 * _tmp368;
    _hessian(10, 7) = _tmp313 * _tmp370 + _tmp318 * _tmp371 + _tmp322 * _tmp372 +
                      _tmp324 * _tmp373 + _tmp325 * _tmp374 + _tmp326 * _tmp375 +
                      _tmp327 * _tmp376 + _tmp328 * _tmp377;
    _hessian(11, 7) = _tmp313 * _tmp378 + _tmp318 * _tmp379 + _tmp322 * _tmp380 +
                      _tmp324 * _tmp381 + _tmp325 * _tmp382 + _tmp326 * _tmp383 +
                      _tmp327 * _tmp384 + _tmp328 * _tmp385;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp338, Scalar(2)) + std::pow(_tmp339, Scalar(2)) +
                     std::pow(_tmp344, Scalar(2)) + std::pow(_tmp345, Scalar(2)) +
                     std::pow(_tmp353, Scalar(2)) + std::pow(_tmp354, Scalar(2)) +
                     std::pow(_tmp359, Scalar(2)) + std::pow(_tmp360, Scalar(2));
    _hessian(9, 8) = _tmp338 * _tmp361 + _tmp339 * _tmp362 + _tmp344 * _tmp363 + _tmp345 * _tmp364 +
                     _tmp353 * _tmp365 + _tmp354 * _tmp366 + _tmp359 * _tmp367 + _tmp360 * _tmp368;
    _hessian(10, 8) = _tmp338 * _tmp370 + _tmp339 * _tmp371 + _tmp344 * _tmp372 +
                      _tmp345 * _tmp373 + _tmp353 * _tmp374 + _tmp354 * _tmp375 +
                      _tmp359 * _tmp376 + _tmp360 * _tmp377;
    _hessian(11, 8) = _tmp338 * _tmp378 + _tmp339 * _tmp379 + _tmp344 * _tmp380 +
                      _tmp345 * _tmp381 + _tmp353 * _tmp382 + _tmp354 * _tmp383 +
                      _tmp359 * _tmp384 + _tmp360 * _tmp385;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp361, Scalar(2)) + std::pow(_tmp362, Scalar(2)) +
                     std::pow(_tmp363, Scalar(2)) + std::pow(_tmp364, Scalar(2)) +
                     std::pow(_tmp365, Scalar(2)) + std::pow(_tmp366, Scalar(2)) +
                     std::pow(_tmp367, Scalar(2)) + std::pow(_tmp368, Scalar(2));
    _hessian(10, 9) = _tmp361 * _tmp370 + _tmp362 * _tmp371 + _tmp363 * _tmp372 +
                      _tmp364 * _tmp373 + _tmp365 * _tmp374 + _tmp366 * _tmp375 +
                      _tmp367 * _tmp376 + _tmp368 * _tmp377;
    _hessian(11, 9) = _tmp361 * _tmp378 + _tmp362 * _tmp379 + _tmp363 * _tmp380 +
                      _tmp364 * _tmp381 + _tmp365 * _tmp382 + _tmp366 * _tmp383 +
                      _tmp367 * _tmp384 + _tmp368 * _tmp385;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp370, Scalar(2)) + std::pow(_tmp371, Scalar(2)) +
                       std::pow(_tmp372, Scalar(2)) + std::pow(_tmp373, Scalar(2)) +
                       std::pow(_tmp374, Scalar(2)) + std::pow(_tmp375, Scalar(2)) +
                       std::pow(_tmp376, Scalar(2)) + std::pow(_tmp377, Scalar(2));
    _hessian(11, 10) = _tmp370 * _tmp378 + _tmp371 * _tmp379 + _tmp372 * _tmp380 +
                       _tmp373 * _tmp381 + _tmp374 * _tmp382 + _tmp375 * _tmp383 +
                       _tmp376 * _tmp384 + _tmp377 * _tmp385;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp378, Scalar(2)) + std::pow(_tmp379, Scalar(2)) +
                       std::pow(_tmp380, Scalar(2)) + std::pow(_tmp381, Scalar(2)) +
                       std::pow(_tmp382, Scalar(2)) + std::pow(_tmp383, Scalar(2)) +
                       std::pow(_tmp384, Scalar(2)) + std::pow(_tmp385, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp109 * _tmp173 + _tmp113 * _tmp176 + _tmp124 * _tmp183 + _tmp128 * _tmp186 +
                 _tmp148 * _tmp66 + _tmp156 * _tmp77 + _tmp163 * _tmp90 + _tmp166 * _tmp94;
    _rhs(1, 0) = _tmp109 * _tmp203 + _tmp113 * _tmp204 + _tmp124 * _tmp206 + _tmp128 * _tmp207 +
                 _tmp197 * _tmp66 + _tmp198 * _tmp77 + _tmp200 * _tmp90 + _tmp201 * _tmp94;
    _rhs(2, 0) = -_tmp109 * _tmp223 - _tmp113 * _tmp225 - _tmp124 * _tmp227 - _tmp128 * _tmp229 -
                 _tmp211 * _tmp66 - _tmp217 * _tmp77 - _tmp219 * _tmp90 - _tmp221 * _tmp94;
    _rhs(3, 0) = _tmp109 * _tmp237 + _tmp113 * _tmp238 + _tmp124 * _tmp239 + _tmp128 * _tmp240 +
                 _tmp231 * _tmp66 + _tmp234 * _tmp77 + _tmp235 * _tmp90 + _tmp236 * _tmp94;
    _rhs(4, 0) = _tmp109 * _tmp247 + _tmp113 * _tmp248 + _tmp124 * _tmp249 + _tmp128 * _tmp250 +
                 _tmp241 * _tmp66 + _tmp244 * _tmp77 + _tmp245 * _tmp90 + _tmp246 * _tmp94;
    _rhs(5, 0) = _tmp109 * _tmp258 + _tmp113 * _tmp259 + _tmp124 * _tmp260 + _tmp128 * _tmp261 +
                 _tmp253 * _tmp66 + _tmp255 * _tmp77 + _tmp256 * _tmp90 + _tmp257 * _tmp94;
    _rhs(6, 0) = _tmp109 * _tmp292 + _tmp113 * _tmp295 + _tmp124 * _tmp296 + _tmp128 * _tmp297 +
                 _tmp280 * _tmp66 + _tmp287 * _tmp77 + _tmp288 * _tmp90 + _tmp289 * _tmp94;
    _rhs(7, 0) = _tmp109 * _tmp325 + _tmp113 * _tmp326 + _tmp124 * _tmp327 + _tmp128 * _tmp328 +
                 _tmp313 * _tmp66 + _tmp318 * _tmp77 + _tmp322 * _tmp90 + _tmp324 * _tmp94;
    _rhs(8, 0) = _tmp109 * _tmp353 + _tmp113 * _tmp354 + _tmp124 * _tmp359 + _tmp128 * _tmp360 +
                 _tmp338 * _tmp66 + _tmp339 * _tmp77 + _tmp344 * _tmp90 + _tmp345 * _tmp94;
    _rhs(9, 0) = _tmp109 * _tmp365 + _tmp113 * _tmp366 + _tmp124 * _tmp367 + _tmp128 * _tmp368 +
                 _tmp361 * _tmp66 + _tmp362 * _tmp77 + _tmp363 * _tmp90 + _tmp364 * _tmp94;
    _rhs(10, 0) = _tmp109 * _tmp374 + _tmp113 * _tmp375 + _tmp124 * _tmp376 + _tmp128 * _tmp377 +
                  _tmp370 * _tmp66 + _tmp371 * _tmp77 + _tmp372 * _tmp90 + _tmp373 * _tmp94;
    _rhs(11, 0) = _tmp109 * _tmp382 + _tmp113 * _tmp383 + _tmp124 * _tmp384 + _tmp128 * _tmp385 +
                  _tmp378 * _tmp66 + _tmp379 * _tmp77 + _tmp380 * _tmp90 + _tmp381 * _tmp94;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace tag_slam_factors
