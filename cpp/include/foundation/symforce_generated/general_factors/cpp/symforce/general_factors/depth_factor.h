// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace general_factors {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: depth_factor
 *
 * Args:
 *     world_to_cam: Pose3
 *     landmark_loc: Matrix31
 *     depth: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     jacobian: (1x9) jacobian of res wrt args world_to_cam (6), landmark_loc (3)
 *     hessian: (9x9) Gauss-Newton hessian for args world_to_cam (6), landmark_loc (3)
 *     rhs: (9x1) Gauss-Newton rhs for args world_to_cam (6), landmark_loc (3)
 */
template <typename Scalar>
void DepthFactor(const sym::Pose3<Scalar>& world_to_cam,
                 const Eigen::Matrix<Scalar, 3, 1>& landmark_loc, const Scalar depth,
                 Eigen::Matrix<Scalar, 1, 1>* const res = nullptr,
                 Eigen::Matrix<Scalar, 1, 9>* const jacobian = nullptr,
                 Eigen::Matrix<Scalar, 9, 9>* const hessian = nullptr,
                 Eigen::Matrix<Scalar, 9, 1>* const rhs = nullptr) {
  // Total ops: 113

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _world_to_cam = world_to_cam.Data();

  // Intermediate terms (33)
  const Scalar _tmp0 = std::pow(_world_to_cam[0], Scalar(2));
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = std::pow(_world_to_cam[1], Scalar(2));
  const Scalar _tmp3 = 2 * _tmp2;
  const Scalar _tmp4 = -_tmp1 - _tmp3 + 1;
  const Scalar _tmp5 = 2 * _world_to_cam[2];
  const Scalar _tmp6 = _tmp5 * _world_to_cam[1];
  const Scalar _tmp7 = 2 * _world_to_cam[0];
  const Scalar _tmp8 = _tmp7 * _world_to_cam[3];
  const Scalar _tmp9 = -_tmp8;
  const Scalar _tmp10 = _tmp6 + _tmp9;
  const Scalar _tmp11 = 2 * _world_to_cam[1] * _world_to_cam[3];
  const Scalar _tmp12 = _tmp7 * _world_to_cam[2];
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = _tmp10 * _world_to_cam[5] - _tmp10 * landmark_loc(1, 0) +
                        _tmp13 * _world_to_cam[4] - _tmp13 * landmark_loc(0, 0) +
                        _tmp4 * _world_to_cam[6] - _tmp4 * landmark_loc(2, 0) + depth;
  const Scalar _tmp15 = _tmp7 * _world_to_cam[1];
  const Scalar _tmp16 = _tmp5 * _world_to_cam[3];
  const Scalar _tmp17 = -_tmp15 + _tmp16;
  const Scalar _tmp18 = std::pow(_world_to_cam[2], Scalar(2));
  const Scalar _tmp19 = std::pow(_world_to_cam[3], Scalar(2));
  const Scalar _tmp20 = _tmp0 - _tmp2;
  const Scalar _tmp21 = _tmp18 - _tmp19 + _tmp20;
  const Scalar _tmp22 = -_tmp6;
  const Scalar _tmp23 = _tmp22 + _tmp9;
  const Scalar _tmp24 = _tmp17 * _world_to_cam[4] - _tmp17 * landmark_loc(0, 0) +
                        _tmp21 * _world_to_cam[5] - _tmp21 * landmark_loc(1, 0) +
                        _tmp23 * _world_to_cam[6] - _tmp23 * landmark_loc(2, 0);
  const Scalar _tmp25 = _tmp15 + _tmp16;
  const Scalar _tmp26 = -_tmp18 + _tmp19 + _tmp20;
  const Scalar _tmp27 = -_tmp11;
  const Scalar _tmp28 = _tmp12 + _tmp27;
  const Scalar _tmp29 = _tmp25 * _world_to_cam[5] - _tmp25 * landmark_loc(1, 0) +
                        _tmp26 * _world_to_cam[4] - _tmp26 * landmark_loc(0, 0) +
                        _tmp28 * _world_to_cam[6] - _tmp28 * landmark_loc(2, 0);
  const Scalar _tmp30 = -_tmp12 + _tmp27;
  const Scalar _tmp31 = _tmp22 + _tmp8;
  const Scalar _tmp32 = _tmp1 + _tmp3 - 1;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _res = (*res);

    _res(0, 0) = _tmp14;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 9>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp24;
    _jacobian(0, 1) = _tmp29;
    _jacobian(0, 2) = 0;
    _jacobian(0, 3) = _tmp13;
    _jacobian(0, 4) = _tmp10;
    _jacobian(0, 5) = _tmp4;
    _jacobian(0, 6) = _tmp30;
    _jacobian(0, 7) = _tmp31;
    _jacobian(0, 8) = _tmp32;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 9, 9>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) = std::pow(_tmp24, Scalar(2));
    _hessian(1, 0) = _tmp24 * _tmp29;
    _hessian(3, 0) = _tmp13 * _tmp24;
    _hessian(4, 0) = _tmp10 * _tmp24;
    _hessian(5, 0) = _tmp24 * _tmp4;
    _hessian(6, 0) = _tmp24 * _tmp30;
    _hessian(7, 0) = _tmp24 * _tmp31;
    _hessian(8, 0) = _tmp24 * _tmp32;
    _hessian(1, 1) = std::pow(_tmp29, Scalar(2));
    _hessian(3, 1) = _tmp13 * _tmp29;
    _hessian(4, 1) = _tmp10 * _tmp29;
    _hessian(5, 1) = _tmp29 * _tmp4;
    _hessian(6, 1) = _tmp29 * _tmp30;
    _hessian(7, 1) = _tmp29 * _tmp31;
    _hessian(8, 1) = _tmp29 * _tmp32;
    _hessian(3, 3) = std::pow(_tmp13, Scalar(2));
    _hessian(4, 3) = _tmp10 * _tmp13;
    _hessian(5, 3) = _tmp13 * _tmp4;
    _hessian(6, 3) = _tmp13 * _tmp30;
    _hessian(7, 3) = _tmp13 * _tmp31;
    _hessian(8, 3) = _tmp13 * _tmp32;
    _hessian(4, 4) = std::pow(_tmp10, Scalar(2));
    _hessian(5, 4) = _tmp10 * _tmp4;
    _hessian(6, 4) = _tmp10 * _tmp30;
    _hessian(7, 4) = _tmp10 * _tmp31;
    _hessian(8, 4) = _tmp10 * _tmp32;
    _hessian(5, 5) = std::pow(_tmp4, Scalar(2));
    _hessian(6, 5) = _tmp30 * _tmp4;
    _hessian(7, 5) = _tmp31 * _tmp4;
    _hessian(8, 5) = _tmp32 * _tmp4;
    _hessian(6, 6) = std::pow(_tmp30, Scalar(2));
    _hessian(7, 6) = _tmp30 * _tmp31;
    _hessian(8, 6) = _tmp30 * _tmp32;
    _hessian(7, 7) = std::pow(_tmp31, Scalar(2));
    _hessian(8, 7) = _tmp31 * _tmp32;
    _hessian(8, 8) = std::pow(_tmp32, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 9, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp14 * _tmp24;
    _rhs(1, 0) = _tmp14 * _tmp29;
    _rhs(2, 0) = 0;
    _rhs(3, 0) = _tmp13 * _tmp14;
    _rhs(4, 0) = _tmp10 * _tmp14;
    _rhs(5, 0) = _tmp14 * _tmp4;
    _rhs(6, 0) = _tmp14 * _tmp30;
    _rhs(7, 0) = _tmp14 * _tmp31;
    _rhs(8, 0) = _tmp14 * _tmp32;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace general_factors
