// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/linear_camera_cal.h>
#include <sym/pose3.h>

namespace general_factors {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: point_reprojection_factor
 *
 * Args:
 *     camera_calibration: LinearCameraCal
 *     world_to_cam: Pose3
 *     landmark_loc: Matrix31
 *     observation: Matrix21
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix21
 *     jacobian: (2x9) jacobian of res wrt args world_to_cam (6), landmark_loc (3)
 *     hessian: (9x9) Gauss-Newton hessian for args world_to_cam (6), landmark_loc (3)
 *     rhs: (9x1) Gauss-Newton rhs for args world_to_cam (6), landmark_loc (3)
 */
template <typename Scalar>
void PointReprojectionFactor(const sym::LinearCameraCal<Scalar>& camera_calibration,
                             const sym::Pose3<Scalar>& world_to_cam,
                             const Eigen::Matrix<Scalar, 3, 1>& landmark_loc,
                             const Eigen::Matrix<Scalar, 2, 1>& observation, const Scalar epsilon,
                             Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
                             Eigen::Matrix<Scalar, 2, 9>* const jacobian = nullptr,
                             Eigen::Matrix<Scalar, 9, 9>* const hessian = nullptr,
                             Eigen::Matrix<Scalar, 9, 1>* const rhs = nullptr) {
  // Total ops: 414

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _camera_calibration = camera_calibration.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _world_to_cam = world_to_cam.Data();

  // Intermediate terms (107)
  const Scalar _tmp0 = std::pow(_world_to_cam[2], Scalar(2));
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = std::pow(_world_to_cam[1], Scalar(2));
  const Scalar _tmp4 = 2 * _tmp3;
  const Scalar _tmp5 = 1 - _tmp4;
  const Scalar _tmp6 = _tmp2 + _tmp5;
  const Scalar _tmp7 = 2 * _world_to_cam[1];
  const Scalar _tmp8 = _tmp7 * _world_to_cam[3];
  const Scalar _tmp9 = -_tmp8;
  const Scalar _tmp10 = 2 * _world_to_cam[0] * _world_to_cam[2];
  const Scalar _tmp11 = _tmp10 + _tmp9;
  const Scalar _tmp12 = _tmp11 * _world_to_cam[6];
  const Scalar _tmp13 = _tmp7 * _world_to_cam[0];
  const Scalar _tmp14 = 2 * _world_to_cam[3];
  const Scalar _tmp15 = _tmp14 * _world_to_cam[2];
  const Scalar _tmp16 = _tmp13 + _tmp15;
  const Scalar _tmp17 = _tmp16 * _world_to_cam[5];
  const Scalar _tmp18 = _tmp11 * landmark_loc(2, 0) + _tmp16 * landmark_loc(1, 0);
  const Scalar _tmp19 =
      -_tmp12 - _tmp17 + _tmp18 - _tmp6 * _world_to_cam[4] + _tmp6 * landmark_loc(0, 0);
  const Scalar _tmp20 = std::pow(_world_to_cam[0], Scalar(2));
  const Scalar _tmp21 = 2 * _tmp20;
  const Scalar _tmp22 = -_tmp21;
  const Scalar _tmp23 = _tmp22 + _tmp5;
  const Scalar _tmp24 = _tmp7 * _world_to_cam[2];
  const Scalar _tmp25 = _tmp14 * _world_to_cam[0];
  const Scalar _tmp26 = -_tmp25;
  const Scalar _tmp27 = _tmp24 + _tmp26;
  const Scalar _tmp28 = _tmp27 * _world_to_cam[5];
  const Scalar _tmp29 = _tmp10 + _tmp8;
  const Scalar _tmp30 = _tmp29 * _world_to_cam[4];
  const Scalar _tmp31 = _tmp27 * landmark_loc(1, 0) + _tmp29 * landmark_loc(0, 0);
  const Scalar _tmp32 =
      -_tmp23 * _world_to_cam[6] + _tmp23 * landmark_loc(2, 0) - _tmp28 - _tmp30 + _tmp31;
  const Scalar _tmp33 = std::max<Scalar>(_tmp32, epsilon);
  const Scalar _tmp34 = Scalar(1.0) / (_tmp33);
  const Scalar _tmp35 = _camera_calibration[0] * _tmp34;
  const Scalar _tmp36 = -_camera_calibration[2] - _tmp19 * _tmp35 + observation(0, 0);
  const Scalar _tmp37 = _tmp2 + _tmp22 + 1;
  const Scalar _tmp38 = _tmp24 + _tmp25;
  const Scalar _tmp39 = _tmp38 * _world_to_cam[6];
  const Scalar _tmp40 = -_tmp15;
  const Scalar _tmp41 = _tmp13 + _tmp40;
  const Scalar _tmp42 = _tmp41 * _world_to_cam[4];
  const Scalar _tmp43 = _tmp38 * landmark_loc(2, 0) + _tmp41 * landmark_loc(0, 0);
  const Scalar _tmp44 =
      -_tmp37 * _world_to_cam[5] + _tmp37 * landmark_loc(1, 0) - _tmp39 - _tmp42 + _tmp43;
  const Scalar _tmp45 = _camera_calibration[1] * _tmp34;
  const Scalar _tmp46 = -_camera_calibration[3] - _tmp44 * _tmp45 + observation(1, 0);
  const Scalar _tmp47 = -_tmp13;
  const Scalar _tmp48 = _tmp15 + _tmp47;
  const Scalar _tmp49 = std::pow(_world_to_cam[3], Scalar(2));
  const Scalar _tmp50 = -_tmp49;
  const Scalar _tmp51 = _tmp0 + _tmp50;
  const Scalar _tmp52 = -_tmp3;
  const Scalar _tmp53 = _tmp20 + _tmp52;
  const Scalar _tmp54 = _tmp51 + _tmp53;
  const Scalar _tmp55 = -_tmp24;
  const Scalar _tmp56 = _tmp26 + _tmp55;
  const Scalar _tmp57 = -_tmp48 * _world_to_cam[4] + _tmp48 * landmark_loc(0, 0) -
                        _tmp54 * _world_to_cam[5] + _tmp54 * landmark_loc(1, 0) -
                        _tmp56 * _world_to_cam[6] + _tmp56 * landmark_loc(2, 0);
  const Scalar _tmp58 = std::pow(_tmp33, Scalar(-2));
  const Scalar _tmp59 = (((_tmp32 - epsilon) > 0) - ((_tmp32 - epsilon) < 0)) + 1;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp59;
  const Scalar _tmp61 = _tmp58 * _tmp60;
  const Scalar _tmp62 = _camera_calibration[0] * _tmp19;
  const Scalar _tmp63 = _tmp61 * _tmp62;
  const Scalar _tmp64 = _tmp57 * _tmp63;
  const Scalar _tmp65 = -_tmp20;
  const Scalar _tmp66 = _tmp0 + _tmp49 + _tmp52 + _tmp65;
  const Scalar _tmp67 = _camera_calibration[1] * _tmp44;
  const Scalar _tmp68 = _tmp61 * _tmp67;
  const Scalar _tmp69 = -_tmp45 * (-_tmp28 - _tmp30 + _tmp31 - _tmp66 * _world_to_cam[6] +
                                   _tmp66 * landmark_loc(2, 0)) +
                        _tmp57 * _tmp68;
  const Scalar _tmp70 = -_tmp0;
  const Scalar _tmp71 = _tmp49 + _tmp70;
  const Scalar _tmp72 = _tmp53 + _tmp71;
  const Scalar _tmp73 =
      -_tmp12 - _tmp17 + _tmp18 - _tmp72 * _world_to_cam[4] + _tmp72 * landmark_loc(0, 0);
  const Scalar _tmp74 = _tmp20 + _tmp3 + _tmp50 + _tmp70;
  const Scalar _tmp75 = _tmp25 + _tmp55;
  const Scalar _tmp76 = -_tmp10;
  const Scalar _tmp77 = _tmp76 + _tmp9;
  const Scalar _tmp78 = -_tmp35 * (-_tmp74 * _world_to_cam[6] + _tmp74 * landmark_loc(2, 0) -
                                   _tmp75 * _world_to_cam[5] + _tmp75 * landmark_loc(1, 0) -
                                   _tmp77 * _world_to_cam[4] + _tmp77 * landmark_loc(0, 0)) +
                        _tmp63 * _tmp73;
  const Scalar _tmp79 = _tmp68 * _tmp73;
  const Scalar _tmp80 = _tmp3 + _tmp65;
  const Scalar _tmp81 = _tmp71 + _tmp80;
  const Scalar _tmp82 =
      -_tmp39 - _tmp42 + _tmp43 - _tmp81 * _world_to_cam[5] + _tmp81 * landmark_loc(1, 0);
  const Scalar _tmp83 = _tmp35 * _tmp82;
  const Scalar _tmp84 = _tmp40 + _tmp47;
  const Scalar _tmp85 = _tmp51 + _tmp80;
  const Scalar _tmp86 = _tmp76 + _tmp8;
  const Scalar _tmp87 = -_tmp84 * _world_to_cam[5] + _tmp84 * landmark_loc(1, 0) -
                        _tmp85 * _world_to_cam[4] + _tmp85 * landmark_loc(0, 0) -
                        _tmp86 * _world_to_cam[6] + _tmp86 * landmark_loc(2, 0);
  const Scalar _tmp88 = _tmp45 * _tmp87;
  const Scalar _tmp89 = -_tmp35 * (_tmp1 + _tmp4 - 1) + _tmp63 * _tmp77;
  const Scalar _tmp90 = -_tmp45 * _tmp48 + _tmp68 * _tmp77;
  const Scalar _tmp91 = -_tmp35 * _tmp84 + _tmp63 * _tmp75;
  const Scalar _tmp92 = _tmp21 - 1;
  const Scalar _tmp93 = -_tmp45 * (_tmp1 + _tmp92) + _tmp68 * _tmp75;
  const Scalar _tmp94 = _tmp61 * (_tmp4 + _tmp92);
  const Scalar _tmp95 = -_tmp35 * _tmp86 + _tmp62 * _tmp94;
  const Scalar _tmp96 = -_tmp45 * _tmp56 + _tmp67 * _tmp94;
  const Scalar _tmp97 = _tmp29 * _tmp63 - _tmp35 * _tmp6;
  const Scalar _tmp98 = _tmp29 * _tmp68 - _tmp41 * _tmp45;
  const Scalar _tmp99 = -_tmp16 * _tmp35 + _tmp27 * _tmp63;
  const Scalar _tmp100 = _tmp27 * _tmp68 - _tmp37 * _tmp45;
  const Scalar _tmp101 = -_tmp11 * _tmp35 + _tmp23 * _tmp63;
  const Scalar _tmp102 = _tmp23 * _tmp68 - _tmp38 * _tmp45;
  const Scalar _tmp103 = std::pow(_camera_calibration[0], Scalar(2));
  const Scalar _tmp104 =
      (Scalar(1) / Scalar(4)) * std::pow(_tmp59, Scalar(2)) / std::pow(_tmp33, Scalar(4));
  const Scalar _tmp105 = _tmp60 / [&]() {
    const Scalar base = _tmp33;
    return base * base * base;
  }();
  const Scalar _tmp106 = std::pow(_camera_calibration[1], Scalar(2));

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp36;
    _res(1, 0) = _tmp46;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 9>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp64;
    _jacobian(1, 0) = _tmp69;
    _jacobian(0, 1) = _tmp78;
    _jacobian(1, 1) = _tmp79;
    _jacobian(0, 2) = -_tmp83;
    _jacobian(1, 2) = -_tmp88;
    _jacobian(0, 3) = _tmp89;
    _jacobian(1, 3) = _tmp90;
    _jacobian(0, 4) = _tmp91;
    _jacobian(1, 4) = _tmp93;
    _jacobian(0, 5) = _tmp95;
    _jacobian(1, 5) = _tmp96;
    _jacobian(0, 6) = _tmp97;
    _jacobian(1, 6) = _tmp98;
    _jacobian(0, 7) = _tmp99;
    _jacobian(1, 7) = _tmp100;
    _jacobian(0, 8) = _tmp101;
    _jacobian(1, 8) = _tmp102;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 9, 9>& _hessian = (*hessian);

    _hessian(0, 0) = _tmp103 * _tmp104 * std::pow(_tmp19, Scalar(2)) * std::pow(_tmp57, Scalar(2)) +
                     std::pow(_tmp69, Scalar(2));
    _hessian(1, 0) = _tmp64 * _tmp78 + _tmp69 * _tmp79;
    _hessian(2, 0) = -_tmp103 * _tmp105 * _tmp19 * _tmp57 * _tmp82 - _tmp69 * _tmp88;
    _hessian(3, 0) = _tmp64 * _tmp89 + _tmp69 * _tmp90;
    _hessian(4, 0) = _tmp64 * _tmp91 + _tmp69 * _tmp93;
    _hessian(5, 0) = _tmp64 * _tmp95 + _tmp69 * _tmp96;
    _hessian(6, 0) = _tmp64 * _tmp97 + _tmp69 * _tmp98;
    _hessian(7, 0) = _tmp100 * _tmp69 + _tmp64 * _tmp99;
    _hessian(8, 0) = _tmp101 * _tmp64 + _tmp102 * _tmp69;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = _tmp104 * _tmp106 * std::pow(_tmp44, Scalar(2)) * std::pow(_tmp73, Scalar(2)) +
                     std::pow(_tmp78, Scalar(2));
    _hessian(2, 1) = -_tmp105 * _tmp106 * _tmp44 * _tmp73 * _tmp87 - _tmp78 * _tmp83;
    _hessian(3, 1) = _tmp78 * _tmp89 + _tmp79 * _tmp90;
    _hessian(4, 1) = _tmp78 * _tmp91 + _tmp79 * _tmp93;
    _hessian(5, 1) = _tmp78 * _tmp95 + _tmp79 * _tmp96;
    _hessian(6, 1) = _tmp78 * _tmp97 + _tmp79 * _tmp98;
    _hessian(7, 1) = _tmp100 * _tmp79 + _tmp78 * _tmp99;
    _hessian(8, 1) = _tmp101 * _tmp78 + _tmp102 * _tmp79;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = _tmp103 * _tmp58 * std::pow(_tmp82, Scalar(2)) +
                     _tmp106 * _tmp58 * std::pow(_tmp87, Scalar(2));
    _hessian(3, 2) = -_tmp83 * _tmp89 - _tmp88 * _tmp90;
    _hessian(4, 2) = -_tmp83 * _tmp91 - _tmp88 * _tmp93;
    _hessian(5, 2) = -_tmp83 * _tmp95 - _tmp88 * _tmp96;
    _hessian(6, 2) = -_tmp83 * _tmp97 - _tmp88 * _tmp98;
    _hessian(7, 2) = -_tmp100 * _tmp88 - _tmp83 * _tmp99;
    _hessian(8, 2) = -_tmp101 * _tmp83 - _tmp102 * _tmp88;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp89, Scalar(2)) + std::pow(_tmp90, Scalar(2));
    _hessian(4, 3) = _tmp89 * _tmp91 + _tmp90 * _tmp93;
    _hessian(5, 3) = _tmp89 * _tmp95 + _tmp90 * _tmp96;
    _hessian(6, 3) = _tmp89 * _tmp97 + _tmp90 * _tmp98;
    _hessian(7, 3) = _tmp100 * _tmp90 + _tmp89 * _tmp99;
    _hessian(8, 3) = _tmp101 * _tmp89 + _tmp102 * _tmp90;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp91, Scalar(2)) + std::pow(_tmp93, Scalar(2));
    _hessian(5, 4) = _tmp91 * _tmp95 + _tmp93 * _tmp96;
    _hessian(6, 4) = _tmp91 * _tmp97 + _tmp93 * _tmp98;
    _hessian(7, 4) = _tmp100 * _tmp93 + _tmp91 * _tmp99;
    _hessian(8, 4) = _tmp101 * _tmp91 + _tmp102 * _tmp93;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp95, Scalar(2)) + std::pow(_tmp96, Scalar(2));
    _hessian(6, 5) = _tmp95 * _tmp97 + _tmp96 * _tmp98;
    _hessian(7, 5) = _tmp100 * _tmp96 + _tmp95 * _tmp99;
    _hessian(8, 5) = _tmp101 * _tmp95 + _tmp102 * _tmp96;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp97, Scalar(2)) + std::pow(_tmp98, Scalar(2));
    _hessian(7, 6) = _tmp100 * _tmp98 + _tmp97 * _tmp99;
    _hessian(8, 6) = _tmp101 * _tmp97 + _tmp102 * _tmp98;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp100, Scalar(2)) + std::pow(_tmp99, Scalar(2));
    _hessian(8, 7) = _tmp100 * _tmp102 + _tmp101 * _tmp99;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp101, Scalar(2)) + std::pow(_tmp102, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 9, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp36 * _tmp64 + _tmp46 * _tmp69;
    _rhs(1, 0) = _tmp36 * _tmp78 + _tmp46 * _tmp79;
    _rhs(2, 0) = -_tmp36 * _tmp83 - _tmp46 * _tmp88;
    _rhs(3, 0) = _tmp36 * _tmp89 + _tmp46 * _tmp90;
    _rhs(4, 0) = _tmp36 * _tmp91 + _tmp46 * _tmp93;
    _rhs(5, 0) = _tmp36 * _tmp95 + _tmp46 * _tmp96;
    _rhs(6, 0) = _tmp36 * _tmp97 + _tmp46 * _tmp98;
    _rhs(7, 0) = _tmp100 * _tmp46 + _tmp36 * _tmp99;
    _rhs(8, 0) = _tmp101 * _tmp36 + _tmp102 * _tmp46;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace general_factors
