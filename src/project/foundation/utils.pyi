"""
Utilities
"""

from __future__ import annotations

import os
import typing

import numpy

__all__ = ["BowDatabase", "BowResult", "BowVector", "BowVocabulary", "CameraParams"]

class BowDatabase:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs): ...
    def __init__(self, vocab: BowVocabulary, use_direct_index: bool = True, direct_index_levels: int = 0) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def add(self, desc: numpy.ndarray) -> None: ...
    def info(self) -> str: ...
    def query(self, descriptors: numpy.ndarray, max_results: int) -> list[BowResult]: ...

class BowResult:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs): ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def entry_id(self) -> int: ...
    @property
    def score(self) -> float: ...

class BowVector:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs): ...

class BowVocabulary:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs): ...
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def create(self, descriptors: list[numpy.ndarray]) -> None: ...
    def info(self) -> str: ...
    def load(self, path: os.PathLike) -> None: ...
    def save(self, path: os.PathLike) -> None: ...
    def score(self, v1: BowVector, v2: BowVector) -> float: ...
    def transform(self, descriptor: numpy.ndarray) -> BowVector: ...

class CameraParams:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs): ...
    @typing.overload
    def __init__(self, fx: float, fy: float, cx: float, cy: float) -> None: ...
    @typing.overload
    def __init__(self, K: numpy.ndarray, dist_coeffs: numpy.ndarray, width: int, height: int) -> None: ...
    def __repr__(self) -> str: ...
